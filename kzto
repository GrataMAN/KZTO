<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Металл Раскрой Pro</title>
    <style>
        body {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);
            color: #ffffff;
            min-height: 100vh;
            overflow-x: hidden;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            position: relative;
        }

        .title {
            font-size: 3rem;
            font-weight: 700;
            background: linear-gradient(45deg, #ff6b35, #f7931e, #ff6b35);
            background-size: 200% 200%;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            animation: gradientShift 3s ease-in-out infinite;
            margin-bottom: 10px;
        }

        .subtitle {
            font-size: 1.2rem;
            color: #a0a0a0;
            font-weight: 300;
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .sheet-formats-section {
            margin-bottom: 30px;
        }

        .formats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .format-checkbox {
            display: flex;
            align-items: center;
            background: rgba(255, 255, 255, 0.08);
            border-radius: 12px;
            padding: 15px 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid rgba(255, 107, 53, 0.2);
        }

        .format-checkbox:hover {
            background: rgba(255, 107, 53, 0.1);
            border-color: rgba(255, 107, 53, 0.4);
            transform: translateY(-2px);
        }

        .format-checkbox input[type="checkbox"] {
            display: none;
        }

        .checkmark {
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255, 107, 53, 0.5);
            border-radius: 4px;
            margin-right: 12px;
            position: relative;
            transition: all 0.3s ease;
        }

        .format-checkbox input[type="checkbox"]:checked + .checkmark {
            background: linear-gradient(45deg, #ff6b35, #f7931e);
            border-color: #ff6b35;
        }

        .format-checkbox input[type="checkbox"]:checked + .checkmark::after {
            content: '✓';
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-weight: bold;
            font-size: 12px;
        }

        .format-text {
            font-size: 1.1rem;
            font-weight: 600;
            color: #ffffff;
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 40px;
            margin-bottom: 40px;
        }

        .results-section {
            grid-column: 1 / -1;
            margin-top: 20px;
        }

        .input-section {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 20px;
            padding: 30px;
            border: 1px solid rgba(255, 107, 53, 0.2);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 25px;
            color: #ff6b35;
            text-align: center;
        }

        .input-group {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }

        .input-field {
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 107, 53, 0.3);
            border-radius: 12px;
            padding: 15px;
            font-size: 1.1rem;
            color: #ffffff;
            transition: all 0.3s ease;
        }

        .input-field:focus {
            outline: none;
            border-color: #ff6b35;
            box-shadow: 0 0 20px rgba(255, 107, 53, 0.3);
            transform: translateY(-2px);
        }

        .input-field::placeholder {
            color: #a0a0a0;
        }

        .add-btn {
            background: linear-gradient(45deg, #ff6b35, #f7931e);
            border: none;
            border-radius: 12px;
            padding: 15px 30px;
            font-size: 1.1rem;
            font-weight: 600;
            color: #ffffff;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(255, 107, 53, 0.3);
        }

        .add-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(255, 107, 53, 0.5);
        }

        .details-list {
            max-height: 300px;
            overflow-y: auto;
            margin-top: 20px;
        }

        .detail-item {
            background: rgba(255, 255, 255, 0.08);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-left: 4px solid #ff6b35;
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from { opacity: 0; transform: translateX(-20px); }
            to { opacity: 1; transform: translateX(0); }
        }

        .detail-info {
            font-size: 1rem;
        }

        .delete-btn {
            background: #e74c3c;
            border: none;
            border-radius: 8px;
            padding: 8px 12px;
            color: white;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }

        .delete-btn:hover {
            background: #c0392b;
            transform: scale(1.05);
        }

        .calculate-section {
            text-align: center;
        }

        .calculate-btn {
            background: linear-gradient(45deg, #ff6b35, #f7931e);
            border: none;
            border-radius: 20px;
            padding: 25px 50px;
            font-size: 1.5rem;
            font-weight: 700;
            color: #ffffff;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 8px 30px rgba(255, 107, 53, 0.4);
            margin-bottom: 30px;
            position: relative;
            overflow: hidden;
        }

        .calculate-btn:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(255, 107, 53, 0.6);
        }

        .calculate-btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none;
        }

        .loading {
            display: none;
            margin: 20px 0;
        }

        .spinner {
            width: 60px;
            height: 60px;
            border: 4px solid rgba(255, 107, 53, 0.3);
            border-top: 4px solid #ff6b35;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .loading-text {
            font-size: 1.2rem;
            color: #ff6b35;
            animation: pulse 1.5s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 0.7; }
            50% { opacity: 1; }
        }

        .results {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 20px;
            padding: 30px;
            border: 1px solid rgba(255, 107, 53, 0.2);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
            display: none;
        }

        .result-item {
            background: rgba(255, 107, 53, 0.1);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 15px;
            border-left: 5px solid #ff6b35;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .sheet-info {
            font-size: 1.2rem;
            font-weight: 600;
        }

        .sheet-count {
            font-size: 1.5rem;
            font-weight: 700;
            color: #ff6b35;
        }

        .total-area {
            text-align: center;
            font-size: 1.3rem;
            font-weight: 600;
            color: #ff6b35;
            margin-top: 20px;
            padding: 15px;
            background: rgba(255, 107, 53, 0.1);
            border-radius: 10px;
        }

        .visual-layout {
            margin-top: 30px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 20px;
            padding: 30px;
            border: 1px solid rgba(255, 107, 53, 0.2);
            grid-column: 1 / -1;
        }

        .sheet-visual {
            margin-bottom: 30px;
            background: rgba(255, 255, 255, 0.08);
            border-radius: 15px;
            padding: 20px;
            border-left: 5px solid #ff6b35;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .sheet-header {
            font-size: 1.2rem;
            font-weight: 600;
            color: #ff6b35;
            margin-bottom: 15px;
            text-align: center;
        }

        .sheet-container {
            position: relative;
            background: #2a2a3e;
            border: 2px solid #ff6b35;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(255, 107, 53, 0.2);
            margin: 0 auto;
        }

        .detail-rect {
            position: absolute;
            background: linear-gradient(45deg, rgba(255, 107, 53, 0.8), rgba(247, 147, 30, 0.8));
            border: 2px solid #ffffff;
            border-radius: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            font-weight: 600;
            color: #ffffff;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.7);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .detail-rect:hover {
            transform: scale(1.05);
            z-index: 10;
            box-shadow: 0 4px 15px rgba(255, 255, 255, 0.3);
        }

        .sheet-info-visual {
            text-align: center;
            margin-top: 15px;
            font-size: 0.9rem;
            color: #a0a0a0;
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .main-content {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            .title {
                font-size: 2rem;
            }
            
            .formats-grid {
                grid-template-columns: 1fr;
            }
            
            .input-group {
                grid-template-columns: 1fr;
            }
            
            .input-section, .calculate-section, .results {
                padding: 20px;
            }
            
            .calculate-btn {
                padding: 20px 30px;
                font-size: 1.2rem;
            }
            
            .sheet-container {
                max-width: 100%;
                overflow-x: auto;
            }
            
            .visual-layout {
                padding: 15px;
            }
            
            .sheet-visual {
                padding: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title">Металл Раскрой Pro</h1>
            <p class="subtitle">Оптимальный расчет листового металла</p>
        </div>

        <div class="sheet-formats-section">
            <div class="input-section">
                <h2 class="section-title">Доступные форматы листов</h2>
                <div class="formats-grid">
                    <label class="format-checkbox">
                        <input type="checkbox" id="format-0" checked>
                        <span class="checkmark"></span>
                        <span class="format-text">1,5×3,0 м</span>
                    </label>
                    <label class="format-checkbox">
                        <input type="checkbox" id="format-1" checked>
                        <span class="checkmark"></span>
                        <span class="format-text">1,25×2,5 м</span>
                    </label>
                    <label class="format-checkbox">
                        <input type="checkbox" id="format-2" checked>
                        <span class="checkmark"></span>
                        <span class="format-text">1,0×2,0 м</span>
                    </label>
                </div>
            </div>
        </div>

        <div class="main-content">
            <div class="input-section">
                <h2 class="section-title">Добавить деталь</h2>
                <div class="input-group">
                    <input type="number" class="input-field" id="length" placeholder="Длина (м)" step="0.01" min="0.01">
                    <input type="number" class="input-field" id="width" placeholder="Ширина (м)" step="0.01" min="0.01">
                    <input type="number" class="input-field" id="quantity" placeholder="Количество" min="1">
                </div>
                <button class="add-btn" onclick="addDetail()">Добавить деталь</button>
                
                <div class="details-list" id="detailsList"></div>
            </div>

            <div class="calculate-section">
                <button class="calculate-btn" id="calculateBtn" onclick="calculateOptimal()">
                    Рассчитать оптимальный раскрой
                </button>
                
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <div class="loading-text">Оптимизируем раскрой...</div>
                </div>
            </div>
        </div>

        <div class="results-section">
            <div class="results" id="results"></div>
        </div>
    </div>

    <script>
        let details = [];
        
        // Форматы листов: [длина, ширина, название]
        const sheetFormats = [
            [3.0, 1.5, "1,5×3,0 м"],
            [2.5, 1.25, "1,25×2,5 м"], 
            [2.0, 1.0, "1,0×2,0 м"]
        ];

        function addDetail() {
            const length = parseFloat(document.getElementById('length').value);
            const width = parseFloat(document.getElementById('width').value);
            const quantity = parseInt(document.getElementById('quantity').value);

            if (!length || !width || !quantity || length <= 0 || width <= 0 || quantity <= 0) {
                alert('Пожалуйста, введите корректные значения для всех полей');
                return;
            }

            const detail = { length, width, quantity, id: Date.now() };
            details.push(detail);
            
            updateDetailsList();
            clearInputs();
        }

        function updateDetailsList() {
            const listElement = document.getElementById('detailsList');
            listElement.innerHTML = '';

            details.forEach(detail => {
                const item = document.createElement('div');
                item.className = 'detail-item';
                item.innerHTML = `
                    <div class="detail-info">
                        ${detail.length}×${detail.width} м × ${detail.quantity} шт
                    </div>
                    <button class="delete-btn" onclick="removeDetail(${detail.id})">Удалить</button>
                `;
                listElement.appendChild(item);
            });
        }

        function removeDetail(id) {
            details = details.filter(detail => detail.id !== id);
            updateDetailsList();
        }

        function clearInputs() {
            document.getElementById('length').value = '';
            document.getElementById('width').value = '';
            document.getElementById('quantity').value = '';
        }

        function canFitOnSheet(detail, sheetLength, sheetWidth) {
            return (detail.length <= sheetLength && detail.width <= sheetWidth) ||
                   (detail.length <= sheetWidth && detail.width <= sheetLength);
        }

        function checkOversizedDetails() {
            const availableFormats = getAvailableFormats();
            const oversized = [];

            details.forEach(detail => {
                let canFit = false;
                for (let format of availableFormats) {
                    if (canFitOnSheet(detail, format[0], format[1])) {
                        canFit = true;
                        break;
                    }
                }
                if (!canFit) {
                    oversized.push(detail);
                }
            });

            return oversized;
        }

        function getAvailableFormats() {
            const availableFormats = [];
            sheetFormats.forEach((format, index) => {
                const checkbox = document.getElementById(`format-${index}`);
                if (checkbox && checkbox.checked) {
                    availableFormats.push(format);
                }
            });
            return availableFormats;
        }

        function optimizeSheetCombination() {
            // Получаем только выбранные форматы
            const availableFormats = getAvailableFormats();
            
            if (availableFormats.length === 0) {
                alert('Выберите хотя бы один формат листа');
                return [];
            }

            // Создаем список всех деталей с развернутым количеством
            let allDetails = [];
            details.forEach(detail => {
                for (let i = 0; i < detail.quantity; i++) {
                    allDetails.push({
                        length: detail.length,
                        width: detail.width,
                        area: detail.length * detail.width,
                        id: detail.id + '_' + i,
                        originalId: detail.id
                    });
                }
            });

            // Сортируем детали по площади (большие сначала)
            allDetails.sort((a, b) => b.area - a.area);

            let result = [];
            let remainingDetails = [...allDetails];
            let sheetCounter = 0;

            // Пока есть необработанные детали
            while (remainingDetails.length > 0) {
                let bestOption = null;
                let bestScore = -1;

                // Проверяем каждый доступный формат листа
                availableFormats.forEach(format => {
                    const [sheetLength, sheetWidth, formatName] = format;
                    const sheetArea = sheetLength * sheetWidth;

                    // Находим детали, которые помещаются на этот лист
                    let fittingDetails = remainingDetails.filter(detail => 
                        canFitOnSheet(detail, sheetLength, sheetWidth)
                    );

                    if (fittingDetails.length === 0) return;

                    // Пытаемся упаковать детали с помощью улучшенного алгоритма
                    const packingResult = packDetailsOnSheet(fittingDetails, sheetLength, sheetWidth);

                    if (packingResult.packedDetails.length > 0) {
                        const efficiency = (packingResult.usedArea / sheetArea) * 100;
                        
                        // Новая система оценки: приоритет экономии материала
                        // Чем больше деталей помещается и чем меньше лист - тем лучше
                        const detailsCount = packingResult.packedDetails.length;
                        const wasteArea = sheetArea - packingResult.usedArea;
                        
                        // Комбинированная оценка:
                        // 1. Количество размещенных деталей (важнее всего)
                        // 2. Минимизация отходов (площадь листа минус использованная площадь)
                        // 3. Эффективность использования листа
                        const score = (detailsCount * 1000) - (wasteArea * 100) + efficiency;
                        
                        if (score > bestScore) {
                            bestOption = {
                                format: formatName,
                                sheetLength: sheetLength,
                                sheetWidth: sheetWidth,
                                sheetArea: sheetArea,
                                packedDetails: packingResult.packedDetails,
                                usedArea: packingResult.usedArea,
                                efficiency: efficiency,
                                layout: packingResult.layout,
                                score: score,
                                wasteArea: wasteArea
                            };
                            bestScore = score;
                        }
                    }
                });

                if (bestOption) {
                    sheetCounter++;
                    
                    // Добавляем лучший вариант в результат
                    const existingFormat = result.find(r => r.format === bestOption.format);
                    if (existingFormat) {
                        existingFormat.sheets++;
                        existingFormat.area += bestOption.sheetArea;
                        existingFormat.totalUsedArea += bestOption.usedArea;
                        existingFormat.totalWasteArea = (existingFormat.totalWasteArea || 0) + bestOption.wasteArea;
                        existingFormat.efficiency = (existingFormat.totalUsedArea / existingFormat.area) * 100;
                        existingFormat.sheetLayouts.push({
                            sheetNumber: sheetCounter,
                            details: bestOption.packedDetails,
                            sheetLength: bestOption.sheetLength,
                            sheetWidth: bestOption.sheetWidth,
                            efficiency: bestOption.efficiency,
                            layout: bestOption.layout,
                            wasteArea: bestOption.wasteArea
                        });
                    } else {
                        result.push({
                            format: bestOption.format,
                            sheets: 1,
                            area: bestOption.sheetArea,
                            totalUsedArea: bestOption.usedArea,
                            totalWasteArea: bestOption.wasteArea,
                            efficiency: bestOption.efficiency,
                            sheetLayouts: [{
                                sheetNumber: sheetCounter,
                                details: bestOption.packedDetails,
                                sheetLength: bestOption.sheetLength,
                                sheetWidth: bestOption.sheetWidth,
                                efficiency: bestOption.efficiency,
                                layout: bestOption.layout,
                                wasteArea: bestOption.wasteArea
                            }]
                        });
                    }

                    // Удаляем упакованные детали из оставшихся
                    bestOption.packedDetails.forEach(packed => {
                        remainingDetails = remainingDetails.filter(detail => detail.id !== packed.id);
                    });
                } else {
                    // Если не можем упаковать ни одну деталь, прерываем
                    break;
                }
            }

            return result;
        }

        function packDetailsOnSheet(details, sheetLength, sheetWidth) {
            let packedDetails = [];
            let layout = [];
            let usedArea = 0;
            
            // Создаем сетку занятости листа
            const gridSize = 0.01; // 1 см точность
            const gridWidth = Math.ceil(sheetLength / gridSize);
            const gridHeight = Math.ceil(sheetWidth / gridSize);
            let occupancyGrid = Array(gridHeight).fill().map(() => Array(gridWidth).fill(false));

            // Сортируем детали по убыванию площади
            const sortedDetails = [...details].sort((a, b) => b.area - a.area);

            for (let detail of sortedDetails) {
                let placed = false;
                
                // Пробуем разместить деталь в обеих ориентациях
                const orientations = [
                    { length: detail.length, width: detail.width, rotated: false },
                    { length: detail.width, width: detail.length, rotated: true }
                ];

                for (let orientation of orientations) {
                    if (orientation.length > sheetLength || orientation.width > sheetWidth) continue;

                    // Ищем место для размещения детали
                    for (let y = 0; y <= gridHeight - Math.ceil(orientation.width / gridSize); y++) {
                        for (let x = 0; x <= gridWidth - Math.ceil(orientation.length / gridSize); x++) {
                            if (canPlaceDetail(occupancyGrid, x, y, orientation.length, orientation.width, gridSize)) {
                                // Размещаем деталь
                                placeDetail(occupancyGrid, x, y, orientation.length, orientation.width, gridSize);
                                
                                packedDetails.push(detail);
                                layout.push({
                                    detail: detail,
                                    x: x * gridSize,
                                    y: y * gridSize,
                                    width: orientation.length,
                                    height: orientation.width,
                                    rotated: orientation.rotated
                                });
                                
                                usedArea += detail.area;
                                placed = true;
                                break;
                            }
                        }
                        if (placed) break;
                    }
                    if (placed) break;
                }
            }

            return { packedDetails, layout, usedArea };
        }

        function canPlaceDetail(grid, startX, startY, detailLength, detailWidth, gridSize) {
            const endX = startX + Math.ceil(detailLength / gridSize);
            const endY = startY + Math.ceil(detailWidth / gridSize);
            
            for (let y = startY; y < endY; y++) {
                for (let x = startX; x < endX; x++) {
                    if (grid[y][x]) return false;
                }
            }
            return true;
        }

        function placeDetail(grid, startX, startY, detailLength, detailWidth, gridSize) {
            const endX = startX + Math.ceil(detailLength / gridSize);
            const endY = startY + Math.ceil(detailWidth / gridSize);
            
            for (let y = startY; y < endY; y++) {
                for (let x = startX; x < endX; x++) {
                    grid[y][x] = true;
                }
            }
        }

        async function calculateOptimal() {
            if (details.length === 0) {
                alert('Добавьте хотя бы одну деталь для расчета');
                return;
            }

            // Проверяем на слишком большие детали
            const oversizedDetails = checkOversizedDetails();
            if (oversizedDetails.length > 0) {
                let errorMessage = 'Ошибка! Следующие детали не помещаются ни на один лист:\n\n';
                oversizedDetails.forEach(detail => {
                    errorMessage += `• ${detail.length}×${detail.width} м (количество: ${detail.quantity})\n`;
                });
                errorMessage += '\nМаксимальный размер листа: 3,0×1,5 м';
                alert(errorMessage);
                return;
            }

            const calculateBtn = document.getElementById('calculateBtn');
            const loading = document.getElementById('loading');
            const results = document.getElementById('results');

            calculateBtn.disabled = true;
            loading.style.display = 'block';
            results.style.display = 'none';

            // Имитация времени расчета для красивой анимации
            await new Promise(resolve => setTimeout(resolve, 2500));

            const optimizedResult = optimizeSheetCombination();

            displayResults(optimizedResult);

            loading.style.display = 'none';
            results.style.display = 'block';
            calculateBtn.disabled = false;
        }

        function displayResults(calculations) {
            const resultsElement = document.getElementById('results');
            let totalArea = 0;
            let totalSheets = 0;

            let html = '<h2 class="section-title">Оптимальная комбинация листов</h2>';

            if (calculations.length === 0) {
                html += '<div class="result-item"><div class="sheet-info">Все детали обработаны</div></div>';
            } else {
                calculations.forEach((calc, index) => {
                    totalArea += calc.area;
                    totalSheets += calc.sheets;
                    const wastePerSheet = (calc.totalWasteArea || 0) / calc.sheets;
                    html += `
                        <div class="result-item">
                            <div class="sheet-info">
                                Листы ${calc.format}
                                <br><small>Эффективность: ${calc.efficiency.toFixed(1)}%</small>
                                <br><small style="color: #f39c12;">Отходы: ${wastePerSheet.toFixed(2)} м²/лист</small>
                            </div>
                            <div class="sheet-count">${calc.sheets} шт</div>
                        </div>
                    `;
                });
            }

            // Подсчитываем общую эффективность
            const totalDetailsArea = details.reduce((sum, detail) => 
                sum + (detail.length * detail.width * detail.quantity), 0);
            const overallEfficiency = totalArea > 0 ? (totalDetailsArea / totalArea) * 100 : 0;

            // Подсчитываем общие отходы
            const totalWasteArea = calculations.reduce((sum, calc) => 
                sum + (calc.totalWasteArea || 0), 0);

            html += `
                <div class="total-area">
                    <div>Всего листов: ${totalSheets} шт</div>
                    <div>Общая площадь материала: ${totalArea.toFixed(2)} м²</div>
                    <div>Площадь отходов: ${totalWasteArea.toFixed(2)} м²</div>
                    <div>Общая эффективность: ${overallEfficiency.toFixed(1)}%</div>
                    <div style="color: #46cc71; font-weight: 700; margin-top: 10px;">
                        💰 Экономия материала: ${((1 - totalWasteArea/totalArea) * 100).toFixed(1)}%
                    </div>
                </div>
            `;

            // Добавляем визуальную раскладку
            html += '<div class="visual-layout">';
            html += '<h2 class="section-title">Визуальная раскладка деталей</h2>';

            calculations.forEach(calc => {
                calc.sheetLayouts.forEach(layout => {
                    html += createSheetVisualization(layout);
                });
            });

            html += '</div>';
            
            resultsElement.innerHTML = html;
        }

        function createSheetVisualization(layout) {
            const scale = 120; // Увеличенный масштаб для лучшей видимости
            // Поворачиваем лист вертикально: ширина становится высотой
            const sheetWidth = layout.sheetWidth * scale;
            const sheetHeight = layout.sheetLength * scale;

            let html = `
                <div class="sheet-visual">
                    <div class="sheet-header">
                        Лист №${layout.sheetNumber} (${layout.sheetLength}×${layout.sheetWidth} м) - ${layout.efficiency.toFixed(1)}% заполнения
                    </div>
                    <div class="sheet-container" style="width: ${sheetWidth}px; height: ${sheetHeight}px;">
            `;

            // Используем точные координаты из алгоритма упаковки
            if (layout.layout && layout.layout.length > 0) {
                layout.layout.forEach((item, index) => {
                    // Поворачиваем координаты для вертикального отображения
                    const x = item.y * scale;
                    const y = item.x * scale;
                    const width = item.height * scale;
                    const height = item.width * scale;

                    const colors = [
                        'rgba(255, 107, 53, 0.9)',
                        'rgba(52, 152, 219, 0.9)',
                        'rgba(46, 204, 113, 0.9)',
                        'rgba(155, 89, 182, 0.9)',
                        'rgba(231, 76, 60, 0.9)',
                        'rgba(241, 196, 15, 0.9)',
                        'rgba(230, 126, 34, 0.9)',
                        'rgba(26, 188, 156, 0.9)'
                    ];
                    const color = colors[index % colors.length];

                    const originalLength = item.detail.length;
                    const originalWidth = item.detail.width;
                    const displayText = item.rotated ? 
                        `${originalWidth}×${originalLength}` : 
                        `${originalLength}×${originalWidth}`;

                    html += `
                        <div class="detail-rect" style="
                            left: ${x}px;
                            top: ${y}px;
                            width: ${width - 2}px;
                            height: ${height - 2}px;
                            background: ${color};
                            border: 1px solid #ffffff;
                        " title="Деталь ${originalLength}×${originalWidth} м${item.rotated ? ' (повернута)' : ''}">
                            ${displayText}
                        </div>
                    `;
                });
            } else {
                // Fallback для старого формата
                layout.details.forEach((detail, index) => {
                    const colors = [
                        'rgba(255, 107, 53, 0.9)',
                        'rgba(52, 152, 219, 0.9)',
                        'rgba(46, 204, 113, 0.9)',
                        'rgba(155, 89, 182, 0.9)',
                        'rgba(231, 76, 60, 0.9)',
                        'rgba(241, 196, 15, 0.9)'
                    ];
                    const color = colors[index % colors.length];

                    html += `
                        <div class="detail-rect" style="
                            left: ${10 + (index * 20)}px;
                            top: ${10 + (index * 15)}px;
                            width: ${detail.length * scale - 2}px;
                            height: ${detail.width * scale - 2}px;
                            background: ${color};
                            border: 1px solid #ffffff;
                        " title="Деталь ${detail.length}×${detail.width} м">
                            ${detail.length}×${detail.width}
                        </div>
                    `;
                });
            }

            html += `
                    </div>
                    <div class="sheet-info-visual">
                        Размещено деталей: ${layout.details.length} • 
                        Эффективность: ${layout.efficiency.toFixed(1)}%
                    </div>
                </div>
            `;

            return html;
        }

        // Обработка Enter в полях ввода
        document.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                addDetail();
            }
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'9883206f95193a6e',t:'MTc1OTM5Njg1Ni4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
